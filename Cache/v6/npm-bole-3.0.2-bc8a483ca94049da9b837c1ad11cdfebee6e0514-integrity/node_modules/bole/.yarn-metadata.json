{
  "manifest": {
    "name": "bole",
    "version": "3.0.2",
    "description": "A tiny JSON logger",
    "main": "bole.js",
    "scripts": {
      "test": "node test.js"
    },
    "keywords": [
      "logging",
      "json"
    ],
    "author": {
      "name": "Rod Vagg",
      "email": "r@va.gg",
      "url": "@rvagg"
    },
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/rvagg/bole.git"
    },
    "dependencies": {
      "fast-safe-stringify": "~1.1.0",
      "individual": "~3.0.0"
    },
    "devDependencies": {
      "bl": "~1.1.2",
      "hyperquest": "~1.3.0",
      "list-stream": "~1.0.1",
      "tape": "~4.5.1"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\SriharshaShesham\\AppData\\Local\\Yarn\\Cache\\v6\\npm-bole-3.0.2-bc8a483ca94049da9b837c1ad11cdfebee6e0514-integrity\\node_modules\\bole\\package.json",
    "readmeFilename": "README.md",
    "readme": "# bole\n\n**A tiny JSON logger, optimised for speed and simplicity**\n\n[![NPM](https://nodei.co/npm/bole.png?downloads=true&downloadRank=true&stars=true)](https://nodei.co/npm/bole/)\n\nLog JSON from within Node.js applications. The log format is obviously inspired by the excellent [Bunyan](https://github.com/trentm/node-bunyan) and is likely to be output-compatible in most cases. The difference is that **bole** aims for even more simplicity, supporting only the common-case basics.\n\n**bole** is designed for **global singleton use**. Your application has many log sources, but they all aggregate to the same sources. You configure output in *one place* for an application, regardless of how many modules and dependencies are also using **bole** for logging.\n\n## Example\n\n**mymodule.js**\n```js\nvar log = require('bole')('mymodule')\n\nmodule.exports.derp = function derp() {\n  log.debug('W00t!')\n  log.info('Starting mymodule#derp()')\n}\n```\n\n**main.js**\n```js\nvar bole = require('bole')\nvar mod  = require('./mymodule')\n\nbole.output({\n  level: 'info',\n  stream: process.stdout\n})\n\nmod.derp()\n```\n\n```text\n$ node main\n{\"time\":\"2014-05-18T23:47:06.545Z\",\"hostname\":\"tweedy\",\"pid\":27374,\"level\":\"info\",\"name\":\"mymodule\",\"message\":\"Starting mymodule#derp()\"}\n```\n\n## Features\n\n* Very fast, bole has been optimised for common cases and is designed to add minimal overhead to your applications, use the `fastTime` feature (below) to make it even faster\n* Arbitrary log **names**, create a logger by calling `var log = bole('logname')` and `'logname'` will be attached to the output\n* Loggers have 4 levels / methods: `log.debug()`, `log.info()`, `log.warn()`, `log.error()`\n* Log methods accept `console.log()` style strfmt output ( using`util.format()`): `log.warn('foo %s', 'bar')`\n* Log methods accept arbitrary objects that extend the log output data, each property on the object is attached to the debug output object\n* Log methods accept `Error` objects and print appropriate `Error` properties, including a full stack trace (including any *cause* where supported)\n* Log methods accept `http.IncomingMessage` for simple logging of an HTTP server's `req` object. URL, method, headers, remote host details will be included in the log output.\n* Newline separated JSON output to arbitrary streams\n* Any number of output streams, each with configurable minimum log-levels\n* Fast short-circuit where no loggers are configured for the log-level, effectively making log statements a noop where they don't output\n* Sub-logger to split a logger for grouping types of events, such as individual HTTP request\n* Object-logging (i.e. not automatically stringified) if you pass an `objectMode:true` stream for output.\n\n## API\n\n### bole(name)\n\nCreate a new **logger** with the supplied `name` to be attached to each output. If you keep a logger-per module you don't need to pass loggers around, *keep your concerns separated*.\n\n### logger#debug(), logger#info(), logger#warn(), logger#error()\n\nLoggers have 4 roughly identical log methods, one for each of the supports log-levels. Log levels are recorded on the output and can be used to determine the level of detail passed to the output.\n\nLog methods support the following types of input:\n\n* **`Error` objects**: log output will include the error `name`, `message`, complete `stack` and also a `code` where there is one. Additionally you can supply further arguments which are passed to `util.format()` and attached as a `\"message\"` property to the output: `log.warn(err, 'error occurred while fetching session for user %s', user.name)`\n\n* **`http.IncomingMessage`** for simple access-log style logging. URL, method, headers, remote address and remote port are logged: `log.info(req)`, further data can be provided for a `\"message\"` property if required.\n\n* **Arbitrary objects** whose properties will be placed directly on the logged output object. Be careful passing objects with large numbers of properties, in most cases you are best to construct your own objects: `log.debug({ dbHost: 'foo', dbPort: 8080 }, 'connecting to database')`, further data can be provided for a `\"message\"` property if required.\n\n* **console.log style output** so you can treat loggers just like `console.log()`: `log.info('logging a string')`, `log.info('it has been said that %d is the meaning of %s', 42, 'life')`, `log.debug('foo', 'bar', 'baz')`.\n\nIf you require more sophisticated serialisation of your objects, then write a utility function to convert those objects to loggable objects.\n\n### logger()\n\nThe `logger` object returned by `bole(name)` is also a function that accepts a `name` argument. It returns a new logger whose name is the parent logger with the new name appended after a `':'` character. This is useful for splitting a logger up for grouping events. Consider the HTTP server case where you may want to group all events from a particular request together:\n\n```js\nvar log = bole('server')\n\nhttp.createServer(function (req, res) {\n  req.log = log(uuid.v4()) // make a new sub-logger\n  req.log.info(req)\n\n  //...\n\n  // log an error against this sub-logger\n  req.log.error(err)\n})\n```\n\nIn this case, your events would be listed as something like `\"name\":\"server:93f57a1a-ae59-46da-a625-8d084a77028a\"` and each event for a particular request would have the same `\"name\"` property, distinct from the rest.\n\nSub-loggers can even be split in to sub-sub loggers, the rabbit hole is ~bottomless.\n\n### bole.output()\n\nAdd outputs for application-wide logging, accepts either an object for defining a single output or an array of objects defining multiple outputs. Each output requires only a `'level'` and a `'stream'`, where the *level* defines the *minimum* debug level to print to this stream and the *stream* is any `WritableStream` that accepts a `.write()` method.\n\nIf you pass in a stream with `objectMode` set to `true` then you will receive the raw log objects rather than their stringified versions.\n\n```js\nbole.output([\n  { level: 'debug', stream: fs.createWriteStream('app.log') },\n  { level: 'info', stream: process.stdout }\n])\n```\n\n### bole.reset()\n\nClears all output streams from the application\n\n### bole.setFastTime()\n\nIf speed is something you care about and you can handle time in milliseconds since epoch (`Date.now()`) rather than the full ISO string (`new Date().toISOString()`) in your logs then use `bole.setFastTime(true)` to shave off some precious microseconds.\n\nNote that this will reset to the default of `false` when you use `bole.reset()`\n\n## Additional features\n\nIf you need to serialise specific types of objects then **write a utility function** to convert to a loggable object.\n\nIf you need a special kind of output then **write a stream to accept output data**.\n\nIf you need to filter a present output data in a special way, **write a package to do it and publish it in npm**.\n\n## License\n\n**bole** is Copyright (c) 2014 Rod Vagg [@rvagg](https://twitter.com/rvagg) and licensed under the MIT License. All rights not explicitly granted in the MIT License are reserved. See the included [LICENSE.md](./LICENSE.md) file for more details.\n",
    "licenseText": "The MIT License (MIT)\n=====================\n\nCopyright (c) 2014 Rod Vagg\n---------------------------\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/bole/-/bole-3.0.2.tgz#bc8a483ca94049da9b837c1ad11cdfebee6e0514",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/bole/-/bole-3.0.2.tgz",
    "hash": "bc8a483ca94049da9b837c1ad11cdfebee6e0514",
    "integrity": "sha1-vIpIPKlASdqbg3wa0Rzf6+5uBRQ=",
    "registry": "npm",
    "packageName": "bole",
    "cacheIntegrity": "sha512-WLCTpsZke/bFmc5FzMfl6p8aOP0c0opkJKXdx0Chpo68Dn2ScKf9Rii6STFLOeh7v5qOCYT/JLcxw7y0Dj66gw== sha1-vIpIPKlASdqbg3wa0Rzf6+5uBRQ="
  },
  "registry": "npm",
  "hash": "bc8a483ca94049da9b837c1ad11cdfebee6e0514"
}