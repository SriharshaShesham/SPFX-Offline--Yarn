{
  "manifest": {
    "name": "merge2",
    "description": "Merge multiple streams into one stream in sequence or parallel.",
    "authors": [
      "Yan Qing <admin@zensh.com>"
    ],
    "version": "1.0.3",
    "main": "index.js",
    "repository": {
      "type": "git",
      "url": "git@github.com:teambition/merge2.git"
    },
    "homepage": "https://github.com/teambition/merge2",
    "keywords": [
      "merge2",
      "multiple",
      "sequence",
      "parallel",
      "merge",
      "stream",
      "merge stream",
      "sync"
    ],
    "engines": {
      "node": ">=0.10"
    },
    "dependencies": {},
    "devDependencies": {
      "standard": "^8.6.0",
      "through2": "^2.0.3",
      "thunks": "^4.7.5",
      "tman": "^1.6.4"
    },
    "scripts": {
      "test": "standard && tman"
    },
    "files": [
      "README.md",
      "index.js"
    ],
    "_registry": "npm",
    "_loc": "C:\\Users\\SriharshaShesham\\AppData\\Local\\Yarn\\Cache\\v6\\npm-merge2-1.0.3-fa44f8b2262615ab72f0808a401d478a70e394db-integrity\\node_modules\\merge2\\package.json",
    "readmeFilename": "README.md",
    "readme": "merge2\n====\n> Merge multiple streams into one stream in sequence or parallel.\n\n[![NPM version][npm-image]][npm-url]\n[![Build Status][travis-image]][travis-url]\n[![Downloads][downloads-image]][downloads-url]\n\n## Install\n\nInstall with [npm](https://npmjs.org/package/merge2)\n\n```\nnpm install merge2\n```\n\n\n## Usage\n\n```js\nvar gulp = require('gulp'),\n  merge2 = require('merge2'),\n  concat = require('gulp-concat'),\n  minifyHtml = require('gulp-minify-html'),\n  ngtemplate = require('gulp-ngtemplate');\n\ngulp.task('app-js', function () {\n  return merge2(\n      gulp.src('static/src/tpl/*.html')\n        .pipe(minifyHtml({empty: true}))\n        .pipe(ngtemplate({\n          module: 'genTemplates',\n          standalone: true\n        })\n      ), gulp.src([\n        'static/src/js/app.js',\n        'static/src/js/locale_zh-cn.js',\n        'static/src/js/router.js',\n        'static/src/js/tools.js',\n        'static/src/js/services.js',\n        'static/src/js/filters.js',\n        'static/src/js/directives.js',\n        'static/src/js/controllers.js'\n      ])\n    )\n    .pipe(concat('app.js'))\n    .pipe(gulp.dest('static/dist/js/'));\n});\n```\n\n```js\nvar stream = merge2([stream1, stream2], stream3, {end: false})\n//...\nstream.add(stream4, stream5);\n//..\nstream.end();\n```\n\n```js\n// equal to merge2([stream1, stream2], stream3)\nvar stream = merge2();\nstream.add([stream1, stream2]);\nstream.add(stream3);\n```\n\n```js\n// merge order:\n//   1. merge `stream1`;\n//   2. merge `stream2` and `stream3` in parallel after `stream1` merged;\n//   3. merge 'stream4' after `stream2` and `stream3` merged;\nvar stream = merge2(stream1, [stream2, stream3], stream4);\n\n// merge order:\n//   1. merge `stream5` and `stream6` in parallel after `stream4` merged;\n//   2. merge 'stream7' after `stream5` and `stream6` merged;\nstream.add([stream5, stream6], stream7);\n```\n\n```js\n// nest merge\n// equal to merge2(stream1, stream2, stream6, stream3, [stream4, stream5]);\nvar streamA = merge2(stream1, stream2);\nvar streamB = merge2(stream3, [stream4, stream5]);\nvar stream = merge2(streamA, streamB);\nstreamA.add(stream6);\n```\n\n## API\n\n```js\nvar merge2 = require('merge2');\n```\n\n### merge2()\n### merge2(options)\n### merge2(stream1, stream2, ..., streamN)\n### merge2(stream1, stream2, ..., streamN, options)\n### merge2(stream1, [stream2, stream3, ...], streamN, options)\nreturn a duplex stream (mergedStream). streams in array will be merged in parallel.\n\n### mergedStream.add(stream)\n### mergedStream.add(stream1, [stream2, stream3, ...], ...)\nreturn the mergedStream.\n\n### mergedStream.on('queueDrain', function() {})\nIt will emit 'queueDrain' when all streams merged. If you set `end === false` in options, this event give you a notice that should add more streams to merge or end the mergedStream.\n\n#### stream\n\n*option*\n\nType: `Readable` or `Duplex` or `Transform` stream.\n\n#### options\n\n*option*\n\nType: `Object`.\n\n* **end** - `Boolean` - if `end === false` then mergedStream will not be auto ended, you should end by yourself. **Default:** `undefined`\n\n* **objectMode** - `Boolean` . **Default:** `true`\n\n`objectMode` and other options(`highWaterMark`, `defaultEncoding` ...) is same as Node.js `Stream`.\n\n## License\n\nMIT Â© [Teambition](https://www.teambition.com)\n\n[npm-url]: https://npmjs.org/package/merge2\n[npm-image]: http://img.shields.io/npm/v/merge2.svg\n\n[travis-url]: https://travis-ci.org/teambition/merge2\n[travis-image]: http://img.shields.io/travis/teambition/merge2.svg\n\n[downloads-url]: https://npmjs.org/package/merge2\n[downloads-image]: http://img.shields.io/npm/dm/merge2.svg?style=flat-square\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2014-2016 Teambition\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "license": "MIT"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/merge2/-/merge2-1.0.3.tgz#fa44f8b2262615ab72f0808a401d478a70e394db",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/merge2/-/merge2-1.0.3.tgz",
    "hash": "fa44f8b2262615ab72f0808a401d478a70e394db",
    "integrity": "sha1-+kT4siYmFaty8ICKQB1HinDjlNs=",
    "registry": "npm",
    "packageName": "merge2",
    "cacheIntegrity": "sha512-KgI4P7MSM31MNBftGJ07WBsLYLx7z9mQsL6+bcHk80AdmUA3cPzX69MK6dSgEgSF9TXLOl040pgo0XP/VTMENA== sha1-+kT4siYmFaty8ICKQB1HinDjlNs="
  },
  "registry": "npm",
  "hash": "fa44f8b2262615ab72f0808a401d478a70e394db"
}