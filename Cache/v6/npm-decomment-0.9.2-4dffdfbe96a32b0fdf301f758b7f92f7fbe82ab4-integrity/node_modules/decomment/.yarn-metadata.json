{
  "manifest": {
    "name": "decomment",
    "version": "0.9.2",
    "description": "Removes comments from JSON/JavaScript, CSS/HTML, CPP/H, etc.",
    "main": "lib/index.js",
    "scripts": {
      "test": "jasmine-node test",
      "coverage": "istanbul cover ./node_modules/jasmine-node/bin/jasmine-node test",
      "travis": "npm run lint && istanbul cover ./node_modules/jasmine-node/bin/jasmine-node test --captureExceptions && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage",
      "lint": "./node_modules/.bin/eslint ./lib ./test"
    },
    "files": [
      "lib",
      "test"
    ],
    "homepage": "https://github.com/vitaly-t/decomment",
    "repository": {
      "type": "git",
      "url": "https://github.com/vitaly-t/decomment.git"
    },
    "bugs": {
      "url": "https://github.com/vitaly-t/decomment/issues",
      "email": "vitaly.tomilov@gmail.com"
    },
    "keywords": [
      "remove comments",
      "JavaScript",
      "JSON",
      "CSS",
      "HTML",
      "CPP",
      "C++",
      "Text"
    ],
    "author": {
      "name": "Vitaly Tomilov",
      "email": "vitaly.tomilov@gmail.com"
    },
    "license": "MIT",
    "engines": {
      "node": ">=6.4",
      "npm": ">=2.15"
    },
    "dependencies": {
      "esprima": "4.0.1"
    },
    "devDependencies": {
      "coveralls": "3.0.2",
      "eslint": "5.3.0",
      "istanbul": "0.4.5",
      "jasmine-node": "1.15.0"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\SriharshaShesham\\AppData\\Local\\Yarn\\Cache\\v6\\npm-decomment-0.9.2-4dffdfbe96a32b0fdf301f758b7f92f7fbe82ab4-integrity\\node_modules\\decomment\\package.json",
    "readmeFilename": "README.md",
    "readme": "decomment\n=========\n\nRemoves comments from JSON/JavaScript, CSS/HTML, CPP/H, etc.\n\n[![Build Status](https://travis-ci.org/vitaly-t/decomment.svg?branch=master)](https://travis-ci.org/vitaly-t/decomment)\n[![Coverage Status](https://coveralls.io/repos/vitaly-t/decomment/badge.svg?branch=master)](https://coveralls.io/r/vitaly-t/decomment?branch=master)\n[![Downloads Count](http://img.shields.io/npm/dm/decomment.svg)](https://www.npmjs.com/package/decomment)\n\n## Installing\n\n```\n$ npm install decomment\n```\n\n## Testing\n\n```\n$ npm test\n```\n\nTesting with coverage:\n\n```\n$ npm run coverage\n```\n\n## Usage\n\n```js\nvar decomment = require('decomment');\n\nvar code = 'var t; // comments';\n\ndecomment(code); //=> var t;\n```\n\nFor build systems / task runners see [gulp-decomment] and [grunt-decomment].\n\n## Features\n\n* Removes both single and multi-line comments from JSON, JavaScript and CSS/Text\n* Automatically recognizes HTML and removes all `<!-- comments -->` from it\n* Does not change layout / formatting of the original document\n* Removes lines that have only comments on them\n* Compatible with CSS3, JSON5 and ECMAScript 6\n\nThe library does not support mixed content - HTML with JavaScript or CSS in it.\nOnce the input code is recognized as HTML, only the HTML comments will be removed from it.\n\n## Performance\n\nFor JSON and JavaScript this library uses [esprima] to guarantee correct processing for regular expressions.\n\nAs an example, it can process [AngularJS 1.5 Core](https://code.angularjs.org/1.5.0/angular.js)\nin under 100ms, which is 1.1MB ~ 30,000 lines of JavaScript.   \n\n## API\n\n### decomment(code, [options]) ⇒ String\n\nThis method first checks if the code starts with `<`, as an HTML, and if so, all `<!-- comment -->` entries\nare removed, according to the `options`.\n\nWhen the `code` is not recognized as HTML, it is assumed to be either JSON or JavaScript. It is then parsed\nthrough [esprima] for ECMAScript 6 compliance, and to extract details about regular expressions.\n\nIf [esprima] fails to validate the code, it will throw a parsing error. When successful, this method will remove\n`//` and `/**/` comments according to the `options` (see below).\n\n##### options.safe ⇒ Boolean\n\n* `false (default)` - remove all multi-line comments\n* `true` - keep special multi-line comments that begin with:\n  - `<!--[if` - for conditional comments in HTML\n  - `/*!` - for everything else (other than HTML)\n\nExample:\n\n```js\nvar decomment = require('decomment');\nvar code = '/*! special */ var a; /* normal */';\ndecomment(code); //=> var a;\ndecomment(code, {safe: true}); //=> /*! special */ var a;\n```\n\n##### options.ignore ⇒ RegExp | [RegExp,...]\n\nTakes either a single or an array of regular expressions to match against. \nAll matching blocks are then skipped, as well as any comment-like content inside them.\n\nExamples:\n\n* CSS may contain Base64-encoded strings with comment-like symbols:\n\n```css\n  src: url(data:font/woff;base64,d09GRg//ABAAAAAAZ)\n```\n\nYou can isolate all `url(*)` blocks by using:\n\n```js\n  {ignore: /url\\([\\w\\s:\\/=\\-\\+;,]*\\)/g}\n```\n\n* If you want to isolate jsDoc blocks (start with `/**`, followed by a line break, end with `*/`),\nyou can use the following:\n\n```js\n{ignore: /\\/\\*\\*\\s*\\n([^\\*]|(\\*(?!\\/)))*\\*\\//g}\n``` \n\n##### options.space ⇒ Boolean\n\n* `false (default)` - remove comment blocks entirely\n* `true` - replace comment blocks with white spaces where needed, in order to preserve\nthe original line + column position of every code element.\n\nExample:\n \n```js\nvar decomment = require('decomment');\nvar code = 'var a/*text*/, b'; \ndecomment(code); //=> var a, b\ndecomment(code, {space: true}); //=> var a        , b\n```\n\nNOTE: When this option is enabled, option `trim` is ignored.\n\n##### options.trim ⇒ Boolean\n\n* `false (default)` - do not trim comments\n* `true` - remove empty lines that follow removed full-line comments\n\nExample:\n \n```js\nvar decomment = require('decomment');\nvar code = '/* comment */\\r\\n\\r\\n var test = 123'; \ndecomment(code); //=> \\r\\n var test = 123\ndecomment(code, {trim: true}); //=> var test = 123\n```\n\nNOTE: This option has no effect when option `space` is enabled.\n\n### decomment.text(text, [options]) ⇒ String\n\nUnlike the default **decomment**, it instructs the library that `text` is not a JSON,\nJavaScript or HTML, rather a plain text that needs no parsing or validation,\nonly to remove `//` and `/**/` comments from it according to the `options`.\n\nThis method is good for any text file that uses syntax `//` and `/**/` for comments,\nsuch as: `.CSS`, `.CPP`, `.H`, etc.\n\nExample:\n\n```js\nvar decomment = require('decomment');\nvar text = '.my-class{color:Red;}// comments';\ndecomment.text(text); //=> .my-class{color:Red;}\n```\n\nPlease note that while the same rules apply for the text blocks (`''`, `\"\"` and \\`\\`),\nyou should not use this method for JSON or JavaScript, as it can break your regular expressions.\n\n### decomment.html(html, [options]) ⇒ String\n\nUnlike the default **decomment** method, it instructs the library not to parse\nor validate the input in any way, rather assume it to be HTML, and remove all\n`<!-- comment -->` entries from it according to the `options`.\n\n### decomment.getEOL(text) ⇒ String\n\nReturns End-of-Line string used within the `text`, based on the occurrence frequency:\n\n* `\\n` - for Unix-encoded text\n* `\\r\\n` - for Windows-encoded text \n\nWhen impossible to conclude (the same or 0 occurrence), it returns the default End-of-Line\nfor the current OS.\n\n## License\n\nCopyright © 2017 [Vitaly Tomilov](https://github.com/vitaly-t);\nReleased under the MIT license.\n\n[esprima]:https://github.com/jquery/esprima\n[grunt-decomment]:https://github.com/vitaly-t/grunt-decomment\n[gulp-decomment]:https://github.com/vitaly-t/gulp-decomment\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/decomment/-/decomment-0.9.2.tgz#4dffdfbe96a32b0fdf301f758b7f92f7fbe82ab4",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/decomment/-/decomment-0.9.2.tgz",
    "hash": "4dffdfbe96a32b0fdf301f758b7f92f7fbe82ab4",
    "integrity": "sha512-sblyUmOJZxiL7oJ2ogJS6jtl/67+CTOW87SrYE/96u3PhDYikYoLCdLzcnceToiQejOLlqNnLCkaxx/+nE/ehg==",
    "registry": "npm",
    "packageName": "decomment",
    "cacheIntegrity": "sha512-sblyUmOJZxiL7oJ2ogJS6jtl/67+CTOW87SrYE/96u3PhDYikYoLCdLzcnceToiQejOLlqNnLCkaxx/+nE/ehg== sha1-Tf/fvpajKw/fMB91i3+S9/voKrQ="
  },
  "registry": "npm",
  "hash": "4dffdfbe96a32b0fdf301f758b7f92f7fbe82ab4"
}