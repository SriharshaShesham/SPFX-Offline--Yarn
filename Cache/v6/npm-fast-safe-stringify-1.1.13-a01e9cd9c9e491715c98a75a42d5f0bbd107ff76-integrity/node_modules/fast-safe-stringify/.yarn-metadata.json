{
  "manifest": {
    "name": "fast-safe-stringify",
    "version": "1.1.13",
    "description": "Safely and quickly serialize JavaScript objects",
    "main": "index.js",
    "scripts": {
      "test": "standard && tap test.js"
    },
    "author": {
      "name": "David Mark Clements"
    },
    "license": "MIT",
    "typings": "index",
    "devDependencies": {
      "clone": "^2.1.0",
      "fastbench": "^1.0.1",
      "json-stringify-safe": "^5.0.1",
      "standard": "^9.0.0",
      "tap": "^10.0.0"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/davidmarkclements/fast-safe-stringify.git"
    },
    "bugs": {
      "url": "https://github.com/davidmarkclements/fast-safe-stringify/issues"
    },
    "homepage": "https://github.com/davidmarkclements/fast-safe-stringify#readme",
    "_registry": "npm",
    "_loc": "C:\\Users\\SriharshaShesham\\AppData\\Local\\Yarn\\Cache\\v6\\npm-fast-safe-stringify-1.1.13-a01e9cd9c9e491715c98a75a42d5f0bbd107ff76-integrity\\node_modules\\fast-safe-stringify\\package.json",
    "readmeFilename": "readme.md",
    "readme": "# fast-safe-stringify\n\nSafely and quickly serialize JavaScript objects\n\nDetects circular dependencies instead of throwing\n(as per usual `JSON.stringify` usage)\n\n## Usage\n\n```js\nvar safeStringify = require('fast-safe-stringify')\nvar o = {a: 1}\no.o = o\n\nconsole.log(safeStringify(o))  // '{\"a\":1,\"o\":\"[Circular]\"}'\nconsole.log(JSON.stringify(o)) //<-- throws\n```\n\n## Benchmarks\n\nThe [json-stringify-safe](http://npm.im/json-stringify-safe) module supplies similar functionality with more info and flexibility.\n\nAlthough not JSON, the core `util.inspect` method can be used for similar purposes (e.g. logging) and also handles circular references.\n\nHere we compare `fast-safe-stringify` with these alternatives:\n\n```\ninspectBench*10000: 179.608ms\njsonStringifySafeBench*10000: 30.099ms\nfastSafeStringifyBench*10000: 19.965ms\n\ninspectCircBench*10000: 220.763ms\njsonStringifyCircSafeBench*10000: 39.115ms\nfastSafeStringifyCircBench*10000: 29.444ms\n\ninspectDeepBench*10000: 2231.148ms\njsonStringifySafeDeepBench*10000: 880.177ms\nfastSafeStringifyDeepBench*10000: 230.209ms\n\ninspectDeepCircBench*10000: 2221.848ms\njsonStringifySafeDeepCircBench*10000: 922.314ms\nfastSafeStringifyDeepCircBench*10000: 236.024ms\n```\n\n## Protip\n\nWhether you're using `fast-safe-stringify` or `json-stringify-safe`\nif your use case consists of deeply nested objects without circular\nreferences the following pattern will give you best results:\n\n```js\nvar fastSafeStringify = require('fast-safe-stringify')\nfunction tryStringify (obj) {\n  try { return JSON.stringify(obj) } catch (_) {}\n}\nvar str = tryStringify(deep) || fastSafeStringify(deep)\n```\n\nIf you're likely to be handling mostly shallow or one level nested objects,\nthis same pattern will degrade performance - it's entirely dependant on use case.\n\n## JSON.stringify options\n\nJSON.stringify's `replacer` and `space` options are not supported. Any value\nother than 0 for `space` halves the speed, and providing a replacer function\ncan result in a segfault. Given that the primary focus of this serializer is\nspeed, the trade offs for supporting these options are not desirable.\n\n## Acknowledgements\n\nSponsored by [nearForm](http://nearform.com)\n\n## License\n\nMIT\n\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2016 David Mark Clements\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/fast-safe-stringify/-/fast-safe-stringify-1.1.13.tgz#a01e9cd9c9e491715c98a75a42d5f0bbd107ff76",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/fast-safe-stringify/-/fast-safe-stringify-1.1.13.tgz",
    "hash": "a01e9cd9c9e491715c98a75a42d5f0bbd107ff76",
    "integrity": "sha1-oB6c2cnkkXFcmKdaQtXwu9EH/3Y=",
    "registry": "npm",
    "packageName": "fast-safe-stringify",
    "cacheIntegrity": "sha512-i5cPAGwAviF/sYF1z3Sq1DaZt/hye7MQAHqpg9eCF1qCOolpSNeYSBYFRVIdzOW7L4A+/XznDxbLQSyygnUCDQ== sha1-oB6c2cnkkXFcmKdaQtXwu9EH/3Y="
  },
  "registry": "npm",
  "hash": "a01e9cd9c9e491715c98a75a42d5f0bbd107ff76"
}