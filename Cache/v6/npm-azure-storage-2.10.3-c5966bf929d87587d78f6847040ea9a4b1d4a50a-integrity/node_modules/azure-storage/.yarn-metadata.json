{
  "manifest": {
    "name": "azure-storage",
    "author": {
      "name": "Microsoft Corporation"
    },
    "version": "2.10.3",
    "description": "Microsoft Azure Storage Client Library for Node.js",
    "typings": "typings/azure-storage/azure-storage.d.ts",
    "tags": [
      "azure",
      "storage",
      "sdk"
    ],
    "keywords": [
      "node",
      "azure",
      "storage"
    ],
    "main": "./lib/azure-storage.js",
    "engines": {
      "node": ">= 0.8.26"
    },
    "license": "Apache-2.0",
    "dependencies": {
      "browserify-mime": "~1.2.9",
      "extend": "^3.0.2",
      "json-edm-parser": "0.1.2",
      "md5.js": "1.3.4",
      "readable-stream": "~2.0.0",
      "request": "^2.86.0",
      "underscore": "~1.8.3",
      "uuid": "^3.0.0",
      "validator": "~9.4.1",
      "xml2js": "0.2.8",
      "xmlbuilder": "^9.0.7"
    },
    "devDependencies": {
      "batchflow": "0.4.0",
      "browserify": "^16.1.1",
      "coveralls": "^3.0.3",
      "factor-bundle": "^2.5.0",
      "grunt": "^1.0.4",
      "grunt-jsdoc": "^2.3.0",
      "ink-docstrap": "^1.3.0",
      "istanbul": "^0.4.5",
      "jshint": ">= 2.1.4",
      "karma": "^4.0.1",
      "karma-chrome-launcher": "^2.2.0",
      "karma-edge-launcher": "^0.4.2",
      "karma-env-preprocessor": "^0.1.1",
      "karma-firefox-launcher": "^1.1.0",
      "karma-ie-launcher": "^1.0.0",
      "karma-mocha": "^1.3.0",
      "karma-mocha-reporter": "^2.2.5",
      "mocha": ">= 1.18.0",
      "mocha-lcov-reporter": "^1.0.0",
      "nock": "0.16",
      "should": "1.2.x",
      "uglify-js": "~3.3.9",
      "watchify": "^3.11.0"
    },
    "homepage": "http://github.com/Azure/azure-storage-node",
    "repository": {
      "type": "git",
      "url": "git@github.com:Azure/azure-storage-node.git"
    },
    "bugs": {
      "url": "http://github.com/Azure/azure-storage-node/issues"
    },
    "scripts": {
      "check": "jshint lib && npm set audit-level high && npm audit",
      "test": "mocha --no-timeouts --recursive test",
      "cover": "istanbul cover ./node_modules/mocha/bin/_mocha -- -R spec -u bdd --no-timeouts --recursive test",
      "coveralls": "npm run cover && cat ./coverage/lcov.info | node ./node_modules/coveralls/bin/coveralls.js",
      "genjs": "node ./browser/bundle.js",
      "jstest": "npm run genjs && node ./browser/test/bundle.js && karma start --single-run"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\SriharshaShesham\\AppData\\Local\\Yarn\\Cache\\v6\\npm-azure-storage-2.10.3-c5966bf929d87587d78f6847040ea9a4b1d4a50a-integrity\\node_modules\\azure-storage\\package.json",
    "readmeFilename": "README.md",
    "readme": "# Microsoft Azure Storage SDK for Node.js and JavaScript for Browsers\n\n[![NPM version](https://badge.fury.io/js/azure-storage.svg)](http://badge.fury.io/js/azure-storage)\n\n* Master [![Build Status](https://travis-ci.org/Azure/azure-storage-node.svg?branch=master)](https://travis-ci.org/Azure/azure-storage-node/branches) [![Coverage Status](https://coveralls.io/repos/Azure/azure-storage-node/badge.svg?branch=master&service=github)](https://coveralls.io/github/Azure/azure-storage-node?branch=master)\n* Dev [![Build Status](https://travis-ci.org/Azure/azure-storage-node.svg?branch=dev)](https://travis-ci.org/Azure/azure-storage-node/branches) [![Coverage Status](https://coveralls.io/repos/Azure/azure-storage-node/badge.svg?branch=dev&service=github)](https://coveralls.io/github/Azure/azure-storage-node?branch=dev)\n\nThis project provides a Node.js package and a browser compatible [JavaScript Client Library](https://github.com/Azure/azure-storage-node#azure-storage-javascript-client-library-for-browsers) that makes it easy to consume and manage Microsoft Azure Storage Services.\n\n> This README page is a reference to the SDK v2. For the new SDK v10, go to [Storage SDK v10 for JavaScript](https://github.com/Azure/azure-storage-js).\n\n| SDK Name                                                                                 | Version     | Description                                                                              | NPM/API Reference Links                                                                                                                                 |\n|------------------------------------------------------------------------------------------|-------------|------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------|\n| [Storage SDK v10 for JavaScript](https://github.com/Azure/azure-storage-js)              | v10         | The next generation Storage SDK (Blob/Queue/File, async and promise support)             | [NPM](https://www.npmjs.com/package/@azure/storage-blob) - [Reference](https://docs.microsoft.com/en-us/javascript/api/overview/azure/storage/client?view=azure-node-preview) |\n| [Storage SDK v2 for JavaScript](https://github.com/Azure/azure-storage-node)             | v2          | Legacy Storage SDK in this repository (Blob/Queue/File/Table, callback style)            | [NPM](https://www.npmjs.com/package/azure-storage) - [Reference](https://docs.microsoft.com/en-us/javascript/api/azure-storage/?view=azure-node-latest) |\n| [Azure Management SDKs for JavaScript](https://github.com/Azure/azure-sdk-for-node)      | v2          | Management SDKs including Storage Resource Provider APIs                                 | [NPM](https://www.npmjs.com/package/azure) - [Reference](https://github.com/Azure/azure-sdk-for-node#documentation)                                     |\n\n# Features\n\n- Blobs\n  - Create/Delete Containers\n  - Create/Read/Update/Delete Blobs\n- Tables\n  - Create/Delete Tables\n  - Query/Create/Read/Update/Delete Entities\n- Files\n  - Create/Delete Shares\n  - Create/Delete Directories\n  - Create/Read/Update/Delete Files\n- Queues\n  - Create/Delete Queues\n  - Insert/Peek Queue Messages\n  - Advanced Queue Operations\n- Service Properties\n  - Get Service Properties\n  - Set Service Properties\n\nPlease check details on API reference documents:\n\n* [Microsoft official API document on docs.microsoft.com](https://docs.microsoft.com/en-us/javascript/api/azure-storage/?view=azure-node-latest)\n* [Generated API references on GitHub pages](http://azure.github.io/azure-storage-node)\n\n# Getting Started\n\n## Install\n\n```shell\nnpm install azure-storage\n```\n\n## Usage\n\n```Javascript\nvar azure = require('azure-storage');\n```\n\nWhen using the Storage SDK, you must provide connection information for the storage account to use. This can be provided using:\n\n* Environment variables - **AZURE_STORAGE_ACCOUNT** and **AZURE_STORAGE_ACCESS_KEY**, or **AZURE_STORAGE_CONNECTION_STRING**.\n\n* Constructors - For example, `var tableSvc = azure.createTableService(accountName, accountKey);`\n\n### Blob Storage\n\nThe **createContainerIfNotExists** method can be used to create a\ncontainer in which to store a blob:\n\n```Javascript\nvar azure = require('azure-storage');\nvar blobService = azure.createBlobService();\nblobService.createContainerIfNotExists('taskcontainer', {\n  publicAccessLevel: 'blob'\n}, function(error, result, response) {\n  if (!error) {\n    // if result = true, container was created.\n    // if result = false, container already existed.\n  }\n});\n```\n\nTo upload a file (assuming it is called task1-upload.txt and it is placed in the same folder as the script below), the method **createBlockBlobFromLocalFile** can be used.\n\n```Javascript\nvar azure = require('azure-storage');\nvar blobService = azure.createBlobService();\n\nblobService.createBlockBlobFromLocalFile('mycontainer', 'taskblob', 'task1-upload.txt', function(error, result, response) {\n  if (!error) {\n    // file uploaded\n  }\n});\n```\n\n\nFor page blobs, use **createPageBlobFromLocalFile**. There are other methods for uploading blobs also, such as **createBlockBlobFromText** or **createPageBlobFromStream**.\n\nThere are also several ways to download block and page blobs. For example, **getBlobToStream** downloads the blob to a stream:\n  \n```Javascript\nvar blobService = azure.createBlobService();\nvar fs = require('fs');\nblobService.getBlobToStream('mycontainer', 'taskblob', fs.createWriteStream('output.txt'), function(error, result, response) {\n  if (!error) {\n    // blob retrieved\n  }\n});\n```\n\nTo create a Shared Access Signature (SAS), use the **generateSharedAccessSignature** method. Additionally you can use the **date** helper functions to easily create a SAS that expires at some point relative to the current time.\n\n```Javascript\nvar azure = require('azure-storage');\nvar blobService = azure.createBlobService();\n\nvar startDate = new Date();\nvar expiryDate = new Date(startDate);\nexpiryDate.setMinutes(startDate.getMinutes() + 100);\nstartDate.setMinutes(startDate.getMinutes() - 100);\n\nvar sharedAccessPolicy = {\n  AccessPolicy: {\n    Permissions: azure.BlobUtilities.SharedAccessPermissions.READ,\n    Start: startDate,\n    Expiry: expiryDate\n  }\n};\n\nvar token = blobService.generateSharedAccessSignature(containerName, blobName, sharedAccessPolicy);\nvar sasUrl = blobService.getUrl(containerName, blobName, token);\n```\n\n### Table Storage\n\nTo ensure a table exists, call **createTableIfNotExists**:\n\n```Javascript\nvar azure = require('azure-storage');\nvar tableService = azure.createTableService();\ntableService.createTableIfNotExists('mytable', function(error, result, response) {\n  if (!error) {\n    // result contains true if created; false if already exists\n  }\n});\n```\nA new entity can be added by calling **insertEntity** or **insertOrReplaceEntity**:\n\n```Javascript\nvar azure = require('azure-storage');\nvar tableService = azure.createTableService();\nvar entGen = azure.TableUtilities.entityGenerator;\nvar entity = {\n  PartitionKey: entGen.String('part2'),\n  RowKey: entGen.String('row1'),\n  boolValueTrue: entGen.Boolean(true),\n  boolValueFalse: entGen.Boolean(false),\n  intValue: entGen.Int32(42),\n  dateValue: entGen.DateTime(new Date(Date.UTC(2011, 10, 25))),\n  complexDateValue: entGen.DateTime(new Date(Date.UTC(2013, 02, 16, 01, 46, 20)))\n};\ntableService.insertEntity('mytable', entity, function(error, result, response) {\n  if (!error) {\n    // result contains the ETag for the new entity\n  }\n});\n```\n\n\nInstead of creating entities manually, you can use **entityGenerator**:\n\n```Javascript\nvar azure = require('azure-storage');\nvar entGen = azure.TableUtilities.entityGenerator;\nvar task = {\n  PartitionKey: entGen.String('hometasks'),\n  RowKey: entGen.String('1'),\n  description: entGen.String('take out the trash'),\n  dueDate: entGen.DateTime(new Date(Date.UTC(2015, 6, 20)))\n};\n```\n\nThe method **retrieveEntity** can then be used to fetch the entity that was just inserted:\n\n```Javascript\nvar azure = require('azure-storage');\nvar tableService = azure.createTableService();\ntableService.retrieveEntity('mytable', 'part2', 'row1', function(error, result, response) {\n  if (!error) {\n    // result contains the entity\n  }\n});\n```\n\nThe method **replaceEntity** or **insertOrReplaceEntity** can be called to update/edit an existing entry. In the following example we assume that an entity `'part2', 'row1'` with a field `'taskDone'` set to `false` already exists.\n\n```Javascript\nvar azure = require('azure-storage');\nvar tableService = azure.createTableService();\nvar entity = {\n  PartitionKey: entGen.String('part2'),\n  RowKey: entGen.String('row1'),\n  taskDone: entGen.Boolean(true),\n};\n\ntableService.insertOrReplaceEntity('mytable', entity, function(error, result, response) {\n  if (!error) {\n    // result contains the entity with field 'taskDone' set to `true`\n  }\n});\n```\n\nUse **TableQuery** to build complex queries:\n\n```Javascript\nvar azure = require('azure-storage');\nvar tableService = azure.createTableService();\nvar query = new azure.TableQuery()\n  .top(5)\n  .where('PartitionKey eq ?', 'part2');\n\ntableService.queryEntities('mytable', query, null, function(error, result, response) {\n  if (!error) {\n    // result.entries contains entities matching the query\n  }\n});\n```\n\n### Queue Storage\n\nThe **createQueueIfNotExists** method can be used to ensure a queue exists:\n\n```Javascript\nvar azure = require('azure-storage');\nvar queueService = azure.createQueueService();\nqueueService.createQueueIfNotExists('taskqueue', function(error) {\n  if (!error) {\n    // Queue exists\n  }\n});\n```\n\nThe **createMessage** method can then be called to insert the message into the queue:\n\n```Javascript\nvar queueService = azure.createQueueService();\nqueueService.createMessage('taskqueue', 'Hello world!', function(error) {\n  if (!error) {\n    // Message inserted\n  }\n});\n```\n\nIt is then possible to call the **getMessage** method, process the message and then call **deleteMessage** inside the callback. This two-step process ensures messages don't get lost when they are removed from the queue.\n\n```Javascript\nvar queueService = azure.createQueueService(),\n  queueName = 'taskqueue';\nqueueService.getMessages(queueName, function(error, serverMessages) {\n  if (!error) {\n    // Process the message in less than 30 seconds, the message\n    // text is available in serverMessages[0].messageText\n\n    queueService.deleteMessage(queueName, serverMessages[0].messageId, serverMessages[0].popReceipt, function(error) {\n      if (!error) {\n        // Message deleted\n      }\n    });\n  }\n});\n```\n\n### File Storage\n\nThe **createShareIfNotExists** method can be used to create a\nshare in which to store a file or a directory of files:\n\n```Javascript\nvar azure = require('azure-storage');\nvar fileService = azure.createFileService();\nfileService.createShareIfNotExists('taskshare', function(error, result, response) {\n  if (!error) {\n    // if result = true, share was created.\n    // if result = false, share already existed.\n  }\n});\n```\n\nTo create a directory, the method **createDirectoryIfNotExists** can be used.\n\n```Javascript\nvar azure = require('azure-storage');\nvar fileService = azure.createFileService();\n\nfileService.createDirectoryIfNotExists('taskshare', 'taskdirectory', function(error, result, response) {\n  if (!error) {\n    // if result.created = true, share was created.\n    // if result.created = false, share already existed.\n  }\n});\n```\n\nTo upload a file (assuming it is called task1-upload.txt and it is placed in the same folder as the script below), the method **createFileFromLocalFile** can be used.\n\n```Javascript\nvar azure = require('azure-storage');\nvar fileService = azure.createFileService();\n\nfileService.createFileFromLocalFile('taskshare', 'taskdirectory', 'taskfile', 'task1-upload.txt', function(error, result, response) {\n  if (!error) {\n    // file uploaded\n  }\n});\n```\n\nTo upload a file from a stream, the method **createFileFromStream** can be used. The var `myFileBuffer` in the script below is a native Node Buffer, or ArrayBuffer object if within a browser environment.\n\n```Javascript\n var stream = require('stream');\n var azure = require('azure-storage');\n var fileService = azure.createFileService();\n\n var fileStream = new stream.Readable();\n fileStream.push(myFileBuffer);\n fileStream.push(null);\n\n fileService.createFileFromStream('taskshare', 'taskdirectory', 'taskfile', fileStream, myFileBuffer.length, function(error, result, response) {\n   if (!error) {\n     // file uploaded\n   }\n });\n```\n\nTo create a file from a text string, the method **createFileFromText** can be used. A Node Buffer or ArrayBuffer object containing the text can also be supplied.\n\n```Javascript\n var azure = require('azure-storage');\n var fileService = azure.createFileService();\n\n var text = 'Hello World!';\n\n fileService.createFileFromText('taskshare', 'taskdirectory', 'taskfile', text, function(error, result, response) {\n   if (!error) {\n     // file created\n   }\n });\n```\n\nThere are also several ways to download files. For example, **getFileToStream** downloads the file to a stream:\n  \n```Javascript\nvar fileService = azure.createFileService();\nvar fs = require('fs');\nfileService.getFileToStream('taskshare', 'taskdirectory', 'taskfile', fs.createWriteStream('output.txt'), function(error, result, response) {\n  if (!error) {\n    // file retrieved\n  }\n});\n```\n\n### Service Properties \n\nThe **getServiceProperties** method can be used to fetch the logging, metrics and CORS settings on your storage account:\n\n```Javascript  \nvar azure = require('azure-storage');\nvar blobService = azure.createBlobService();\n\nblobService.getServiceProperties(function(error, result, response) {  \n  if (!error) {\n     var serviceProperties = result;\n     // properties are fetched\n  } \n});  \n```\n\nThe **setServiceProperties** method can be used to modify the logging, metrics and CORS settings on your storage account:\n\n```Javascript  \nvar azure = require('azure-storage');\nvar blobService = azure.createBlobService();\n\nvar serviceProperties = generateServiceProperties(); \n\nblobService.setServiceProperties(serviceProperties, function(error, result, response) {  \n  if (!error) {\n    // properties are set\n  }\n});  \n\nfunction generateServiceProperties() {\n  return serviceProperties = {\n    Logging: {\n      Version: '1.0',\n      Delete: true,\n      Read: true,\n      Write: true,\n      RetentionPolicy: {\n        Enabled: true,\n        Days: 10,\n      },\n    },\n    HourMetrics: {\n      Version: '1.0',\n      Enabled: true,\n      IncludeAPIs: true,\n      RetentionPolicy: {\n        Enabled: true,\n        Days: 10,\n      },\n    },\n    MinuteMetrics: {\n      Version: '1.0',\n      Enabled: true,\n      IncludeAPIs: true,\n      RetentionPolicy: {\n        Enabled: true,\n        Days: 10,\n      },\n    },\n    Cors: {\n      CorsRule: [\n        {\n          AllowedOrigins: ['www.azure.com', 'www.microsoft.com'],\n          AllowedMethods: ['GET', 'PUT'],\n          AllowedHeaders: ['x-ms-meta-data*', 'x-ms-meta-target*', 'x-ms-meta-xyz', 'x-ms-meta-foo'],\n          ExposedHeaders: ['x-ms-meta-data*', 'x-ms-meta-source*', 'x-ms-meta-abc', 'x-ms-meta-bcd'],\n          MaxAgeInSeconds: 500,\n        },\n        {\n          AllowedOrigins: ['www.msdn.com', 'www.asp.com'],\n          AllowedMethods: ['GET', 'PUT'],\n          AllowedHeaders: ['x-ms-meta-data*', 'x-ms-meta-target*', 'x-ms-meta-xyz', 'x-ms-meta-foo'],\n          ExposedHeaders: ['x-ms-meta-data*', 'x-ms-meta-source*', 'x-ms-meta-abc', 'x-ms-meta-bcd'],\n          MaxAgeInSeconds: 500,\n        },\n      ],\n    },\n  };\n}\n```\n\nWhen modifying the service properties, you can fetch the properties and then modify the them to prevent overwriting the existing settings.\n\n```Javascript\nvar azure = require('azure-storage');\nvar blobService = azure.createBlobService();\n\nblobService.getServiceProperties(function(error, result, response) {  \n  if (!error) {\n    var serviceProperties = result;\n     \n    // modify the properties\n\n    blobService.setServiceProperties(serviceProperties, function(error, result, response) {  \n      if (!error) {\n        // properties are set\n      }\n    });\n  } \n});\n```\n\n### Retry Policies\n\nBy default, no retry will be performed with service instances newly created by Azure storage client library for Node.js.\nTwo pre-written retry polices [ExponentialRetryPolicyFilter](http://azure.github.io/azure-storage-node/ExponentialRetryPolicyFilter.html) and [LinearRetryPolicyFilter](http://azure.github.io/azure-storage-node/LinearRetryPolicyFilter.html) are available with modifiable settings, and can be used through associating filter.\nAny custom retry logic may be used by customizing RetryPolicyFilter instance.\n\nFor how to use pre-written retry policies and how to define customized retry policy, please refer to **retrypolicysample** in samples directory.\n\n## Code Samples\n\nHow-Tos focused around accomplishing specific tasks are available on the [Microsoft Azure Node.js Developer Center](http://azure.microsoft.com/en-us/develop/nodejs/).\n\n* [How to use the Blob Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-blob-storage/)\n\n* [How to use the Table Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-table-storage/)\n\n* [How to use the Queue Service from Node.js](http://azure.microsoft.com/en-us/documentation/articles/storage-nodejs-how-to-use-queues/)\n\n# Running Tests\n\nUnit tests can then be run from the module's root directory using:\n\n```shell\nnpm test\n```\n\nRunning test is also supported by Grunt by:\n\n```shell\ngrunt # mochaTest as the default task\n```\n\nBy default the unit tests are ran with Nock recording data. To run tests against real storage account, please set environment variable to turn off Nock by:\n\n```\nset NOCK_OFF=true\n```\n\nand set up the following environment variable for storage account credentials by \n\n```Batchfile\nset AZURE_STORAGE_CONNECTION_STRING=\"valid storage connection string\"\n```\n\nTo record the data in a test pass against real storage account for future Nock usage:\n\n```Batchfile\nset AZURE_NOCK_RECORD=true\n```\n\nIn order to be able to use a proxy like fiddler, an additional environment variable should be set up:\n\n```Batchfile\nset NODE_TLS_REJECT_UNAUTHORIZED=0\nset HTTP_PROXY=http://127.0.0.1:8888\n```\n\nOn Linux, please use `export` other than `set` to set the variables.\n\n# Azure Storage JavaScript Client Library for Browsers\n\nAzure Storage Node.js Client Library is compatible with [Browserify](http://browserify.org/). This means you can bundle your Node.js application which depends on the Node.js Client Library using Browserify.\n\nYou can also choose to download the JavaScript Client Library provided by us, or generate the library by yourself. Please refer to the [README.md](https://github.com/Azure/azure-storage-node/blob/master/browser/README.md) under `browser` folder for detailed usage guidelines.\n\n## Downloading Azure Storage JavaScript Client Library\n\nIt's recommended to use the Azure Storage JavaScript Client Library provided by us. Please [download the latest library](https://aka.ms/downloadazurestoragejs).\n\n## Generating Azure Storage JavaScript Client Library\n\nWe also provide browserify bundle scripts which generate Azure Storage JavaScript Client Library. The bundle script reduces the size of the Storage Client Library by splitting into smaller files, one per storage service. For more detailed information, refer to [README.md](https://github.com/Azure/azure-storage-node/blob/master/browser/README.md) under `browser` folder.\n\n# JsDoc\n\nJsDoc can be generated by `grunt jsdoc`.\n\nTo load the docs by devserver after generation, run `grunt doc` and then browse the docs at [http://localhost:8888](http://localhost:8888).\n\n# Need Help?\n\nBe sure to check out the Microsoft Azure [Developer Forums on MSDN](http://go.microsoft.com/fwlink/?LinkId=234489) if you have trouble with the provided code or use StackOverflow.\n\n# Learn More\n\n- [Microsoft Azure Node.js Developer Center](http://azure.microsoft.com/en-us/develop/nodejs/)\n- [Azure Storage Team Blog](http://blogs.msdn.com/b/windowsazurestorage/)\n\n# Contribute\n\nWe gladly accept community contributions.\n\n- Issues: Please report bugs using the Issues section of GitHub\n- Forums: Interact with the development teams on StackOverflow or the Microsoft Azure Forums\n- Source Code Contributions: If you would like to become an active contributor to this project please follow the instructions provided in [Contributing.md](CONTRIBUTING.md).\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\nFor general suggestions about Microsoft Azure please use our [UserVoice forum](http://feedback.azure.com/forums/34192--general-feedback).\n",
    "licenseText": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/azure-storage/-/azure-storage-2.10.3.tgz#c5966bf929d87587d78f6847040ea9a4b1d4a50a",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/azure-storage/-/azure-storage-2.10.3.tgz",
    "hash": "c5966bf929d87587d78f6847040ea9a4b1d4a50a",
    "integrity": "sha512-IGLs5Xj6kO8Ii90KerQrrwuJKexLgSwYC4oLWmc11mzKe7Jt2E5IVg+ZQ8K53YWZACtVTMBNO3iGuA+4ipjJxQ==",
    "registry": "npm",
    "packageName": "azure-storage",
    "cacheIntegrity": "sha512-IGLs5Xj6kO8Ii90KerQrrwuJKexLgSwYC4oLWmc11mzKe7Jt2E5IVg+ZQ8K53YWZACtVTMBNO3iGuA+4ipjJxQ== sha1-xZZr+SnYdYfXj2hHBA6ppLHUpQo="
  },
  "registry": "npm",
  "hash": "c5966bf929d87587d78f6847040ea9a4b1d4a50a"
}