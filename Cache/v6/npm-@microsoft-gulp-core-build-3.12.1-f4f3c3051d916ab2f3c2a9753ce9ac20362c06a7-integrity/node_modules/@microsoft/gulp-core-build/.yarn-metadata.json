{
  "manifest": {
    "name": "@microsoft/gulp-core-build",
    "version": "3.12.1",
    "description": "Core gulp build tasks for building typescript, html, less, etc.",
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoft/rushstack/tree/master/core-build/gulp-core-build"
    },
    "scripts": {
      "build": "gulp --clean"
    },
    "main": "lib/index.js",
    "typings": "lib/index.d.ts",
    "license": "MIT",
    "dependencies": {
      "@microsoft/node-core-library": "3.15.1",
      "@types/chalk": "0.4.31",
      "@types/gulp": "4.0.6",
      "@types/node": "8.10.54",
      "@types/node-notifier": "0.0.28",
      "@types/orchestrator": "0.0.30",
      "@types/semver": "5.3.33",
      "@types/through2": "2.0.32",
      "@types/vinyl": "2.0.3",
      "@types/yargs": "0.0.34",
      "colors": "~1.2.1",
      "del": "^2.2.2",
      "end-of-stream": "~1.1.0",
      "glob-escape": "~0.0.1",
      "globby": "~5.0.0",
      "gulp": "~4.0.2",
      "gulp-flatten": "~0.2.0",
      "gulp-if": "^2.0.1",
      "jest": "~23.6.0",
      "jest-cli": "~22.4.3",
      "jest-environment-jsdom": "~22.4.3",
      "jest-resolve": "~22.4.3",
      "jsdom": "~11.11.0",
      "lodash.merge": "~4.6.2",
      "merge2": "~1.0.2",
      "node-notifier": "~5.0.2",
      "object-assign": "~4.1.0",
      "orchestrator": "~0.3.8",
      "pretty-hrtime": "~1.0.2",
      "semver": "~5.3.0",
      "through2": "~2.0.1",
      "vinyl": "~2.2.0",
      "yargs": "~4.6.0",
      "z-schema": "~3.18.3"
    },
    "devDependencies": {
      "@types/mocha": "5.2.5",
      "@types/chai": "3.4.34",
      "@microsoft/node-library-build": "6.1.2",
      "@microsoft/rush-stack-compiler-3.4": "0.1.15",
      "@types/z-schema": "3.16.31",
      "chai": "~3.5.0"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\SriharshaShesham\\AppData\\Local\\Yarn\\Cache\\v6\\npm-@microsoft-gulp-core-build-3.12.1-f4f3c3051d916ab2f3c2a9753ce9ac20362c06a7-integrity\\node_modules\\@microsoft\\gulp-core-build\\package.json",
    "readmeFilename": "README.md",
    "readme": "# @microsoft/gulp-core-build\n\n`gulp-core-build` is a set of utility functions that makes it easy to create gulp-based build rigs. Instead of having unweildy unmaintainable gulpfiles in every project, we want the build setup to be as reusable and centralized as possible.\n\n[![npm version](https://badge.fury.io/js/%40microsoft%2Fgulp-core-build.svg)](https://badge.fury.io/js/%40microsoft%2Fgulp-core-build)\n[![Build Status](https://travis-ci.org/Microsoft/gulp-core-build.svg?branch=master)](https://travis-ci.org/Microsoft/gulp-core-build) [![Dependencies](https://david-dm.org/Microsoft/gulp-core-build.svg)](https://david-dm.org/Microsoft/gulp-core-build)\n\nThe gulp build system, along with its rich plugin ecosystem, is a very powerful tool for web development projects.\nHowever project gulp build setups become difficult to manage over time, as gulpfiles grow in complexity. This project\nsimplifies a number of aspects of getting a build setup going for a majority of scenarios.\n\nCore build defines a contract for tasks to implement, such that they can share opinions about where things end up. Tasks are modular but they are designed to work well together.\n\nWith gulp core build, your gulpfile translates into a list of task definitions, each which define what to run:\n\n```typescript\n'use strict';\n\n// Import core build and the tasks the project needs.\nlet build = require('gulp-core-build');\nlet lint = require('gulp-core-build-typescript').tslint;\nlet typescript = require('gulp-core-build-typescript').typescript;\nlet sass = require('gulp-core-build-sass').default;\nlet webpack = require('gulp-core-build-webpack').default;\nlet serve = require('gulp-core-build-serve').default;\n\n// Define gulp tasks.\nlet buildTasks = build.task('build', build.parallel(lint, typescript, sass));\nlet testTasks = build.task('test', build.serial(buildTasks, build.jest));\nlet bundleTasks = build.task('bundle', build.serial(buildTasks, webpack));\nlet serveTasks = build.task('serve', build.serial(bundleTasks, serve));\nlet defaultTasks = build.task('default', testTasks);\n\n// Initialize!\nbuild.initialize(require('gulp'));\n```\n\n# Usage\n\nWithin your project, install gulp, gulp-core-build, and the tasks you need:\n\n```\nnpm install --save-dev gulp gulp-core-build\n```\n\nThen install the tasks you need:\n\n```\nnpm install --save-dev gulp-core-build-typescript gulp-core-build-webpack gulp-core-build-serve\n\n```\n\nCreate a gulpfile.js that sets up the tasks in the way you want them to run:\n\n```javascript\n'use strict';\n\n// Import core build.\nlet build = require('gulp-core-build');\n\n// Import the tasks.\nlet lint = require('gulp-core-build-typescript').tslint;\nlet typescript = require('gulp-core-build-typescript').typescript;\nlet sass = require('gulp-core-build-sass').default;\nlet webpack = require('gulp-core-build-webpack').default;\nlet serve = require('gulp-core-build-serve').default;\n\n// Shorthand for defining custom subtasks\n// The proper method for this is to introduce a new package which exports a class that extends GulpTask\n// However, this shorthand allows an easy way to introduce one-off subtasks directly in the gulpfile\nlet helloWorldSubtask = build.subTask('do-hello-world-subtask', function(gulp, buildOptions, done) {\n  this.log('Hello, World!'); // use functions from GulpTask\n});\n\n// Define gulp tasks.\nlet buildTasks = build.task('build', build.parallel(helloWorldSubtask, lint, typescript, sass));\nlet testTasks = build.task('test', build.serial(buildTasks, build.jest));\nlet bundleTasks = build.task('bundle', build.serial(buildTasks, webpack));\nlet serveTasks = build.task('serve', build.serial(bundleTasks, serve));\nlet helloWorldTasks = build.task('hello-world', helloWorldSubtask);\nlet defaultTasks = build.task('default', testTasks);\n\n// Tell the build to set up gulp tasks with the given gulp instance.\nbuild.initialize(require('gulp'));\n```\n\nOnce this is set up, you should be able to execute the gulp tasks and they should run in the order you defined.\n\n# Available tasks\n\n| Task name | Description |\n| --------- | ----------- |\n| [gulp-core-build-typescript](https://www.npmjs.com/package/@microsoft/gulp-core-build-typescript) | Builds and lints typescript. |\n| [gulp-core-build-sass](https://www.npmjs.com/package/@microsoft/gulp-core-build) | Compiles sass into css, into js modules, that are theme friendly. |\n| [gulp-core-build-webpack](https://www.npmjs.com/package/@microsoft/gulp-core-build-webpack) | Runs webpack given a config, and outputs libraries plus the stats and logging. |\n| [gulp-core-build-serve](https://www.npmjs.com/package/@microsoft/gulp-core-build-serve) | Sets up a server and live reload for a quick dev loop. |\n| [gulp-core-build-mocha](https://www.npmjs.com/package/@microsoft/gulp-core-build-mocha) | Runs unit tests in a NodeJS environment with [Mocha](https://www.npmjs.com/package/mocha) |\n\n# API\n\n## task(name, task)\n\nDefines a named task to be registered with gulp as a primary gulp task, which will run the provided task when execution.\n\n## parallel(tasks)\n\nRuns a given list of tasks in parallel execution order.\n\n## serial(tasks)\n\nRuns a given list of tasks in serial execution order.\n\n## subtask(name: string, fn: ICustomGulpTask)\n\nCreates a subtask (which is not registered directly with gulp, use `task()` for that) which can be\nused with `parallel()` and `serial()`. The `this` variable in the callback function will be an instance of a `GulpTask`.\n\n`fn` should be a function of type `ICustomGulpTask`\n\n```typescript\n/**\n * The callback interface for a custom task definition.\n * The task should either return a Promise, a stream, or call the\n * callback function (passing in an object value if there was an error).\n */\nexport interface ICustomGulpTask {\n  (gulp: gulp.Gulp | GulpProxy, buildConfig: IBuildConfig, done: (failure?: Object) => void):\n    Promise<Object> | NodeJS.ReadWriteStream | void;\n}\n```\n\n## initialize(gulpInstance, [buildOtions])\n\nRegisters the gulp tasks.\n\nThe options are broken down into task-specific sections, and all are optional, so only provide the ones\nthat require deviating from defaults:\n\n```typescript\nbuild.initializeTasks(\n  require('gulp'),\n  {\n    build: { /* build options */ },\n    bundle: { /* bundle options */ },\n    test: { /* test options */ },\n    serve: { /* serve options */ },\n    clean: { /* clean options */ }\n  });\n```\n\n## addSuppression(suppression: string | RegExp)\n\nSuppresses a warning or an error message. It will no longer be displayed in the build logs, nor will the warning or error cause the build to fail.\n\n```typescript\n// Suppresses this exact warning\nbuild.addSuppression(\"Warning - tslint /foo/bar/test.tsx no-any\")\n\n// Suppresses anything with \"tslint\"\nbuild.addSuppression(/tslint/)\n```\n\n# Building gulp-core-build\n1. ```npm install --force```\n2. ```gulp```\n\n# Defining a custom task\n\nThe `subtask()` function is used to define a custom task. For example,\nyou could create the following subtask, which is registered to the command\n`gulp hello-world`:\n\n```javascript\nlet helloWorldSubtask = build.subTask('do-hello-world-subtask', function(gulp, buildOptions, done) {\n  this.log('Hello, World!'); // use functions from GulpTask\n});\n\n// Register the task with gulp command line\nlet helloWorldTask = build.task('hello-world', helloWorldSubtask);\n```\n\nNote that the command `gulp do-hello-world-subtask` would error.\n\n\n# License\n\nMIT\n",
    "licenseText": "@microsoft/gulp-core-build\n\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@microsoft/gulp-core-build/-/gulp-core-build-3.12.1.tgz#f4f3c3051d916ab2f3c2a9753ce9ac20362c06a7",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@microsoft/gulp-core-build/-/gulp-core-build-3.12.1.tgz",
    "hash": "f4f3c3051d916ab2f3c2a9753ce9ac20362c06a7",
    "integrity": "sha512-npDc1oWEXZpRrLrJvTxENI7q3h8/I6PPt58ZnGVzke0AfIIcPHdsqjDrO37nCRbOwuLJC/M1lTS+pB83TPmPeA==",
    "registry": "npm",
    "packageName": "@microsoft/gulp-core-build",
    "cacheIntegrity": "sha512-npDc1oWEXZpRrLrJvTxENI7q3h8/I6PPt58ZnGVzke0AfIIcPHdsqjDrO37nCRbOwuLJC/M1lTS+pB83TPmPeA== sha1-9PPDBR2RarLzwql1POmsIDYsBqc="
  },
  "registry": "npm",
  "hash": "f4f3c3051d916ab2f3c2a9753ce9ac20362c06a7"
}