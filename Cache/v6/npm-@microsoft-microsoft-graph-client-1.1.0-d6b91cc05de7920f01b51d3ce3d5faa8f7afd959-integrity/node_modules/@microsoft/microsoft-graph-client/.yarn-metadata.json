{
  "manifest": {
    "name": "@microsoft/microsoft-graph-client",
    "//": "NOTE: The version here should match exactly the exported const PACKAGE_VERSION in common.ts. If you change it here, also change it there.",
    "version": "1.1.0",
    "description": "Microsoft Graph Client Library",
    "main": "lib/src/index.js",
    "typings": "lib/src/index",
    "files": [
      "lib/"
    ],
    "types": "./lib/src/index.d.ts",
    "devDependencies": {
      "@types/mocha": "^5.2.4",
      "@types/node": "^9.4.0",
      "browserify": "^13.1.0",
      "mocha": "^5.2.0",
      "typescript": "^2.2.1",
      "uglify-js": "^3.4.5"
    },
    "scripts": {
      "build": "tsc && node node-browserify.js > lib/graph-js-sdk-web.js && uglifyjs ./lib/graph-js-sdk-web.js --output ./lib/graph-js-sdk-web.js",
      "test": "mocha lib/spec/core",
      "test:types": "tsc --p spec/types && mocha spec/types"
    },
    "dependencies": {
      "es6-promise": "^4.1.0",
      "isomorphic-fetch": "^2.2.1"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/microsoftgraph/msgraph-sdk-javascript.git"
    },
    "_registry": "npm",
    "_loc": "C:\\Users\\SriharshaShesham\\AppData\\Local\\Yarn\\Cache\\v6\\npm-@microsoft-microsoft-graph-client-1.1.0-d6b91cc05de7920f01b51d3ce3d5faa8f7afd959-integrity\\node_modules\\@microsoft\\microsoft-graph-client\\package.json",
    "readmeFilename": "README.md",
    "readme": "# Microsoft Graph JavaScript Client Library\n[![npm version badge](https://img.shields.io/npm/v/@microsoft/microsoft-graph-client.svg?maxAge=86400)](https://www.npmjs.com/package/@microsoft/microsoft-graph-client)\n[![Travis](https://travis-ci.org/microsoftgraph/msgraph-sdk-javascript.svg?branch=master&style=flat-square)](https://travis-ci.org/microsoftgraph/msgraph-sdk-javascript)\n\nThe Microsoft Graph JavaScript client library is a lightweight wrapper around the Microsoft Graph API that can be used server-side and in the browser.  See the [samples](samples) folder for code examples.  You can also use our [TypeScript graph types](https://github.com/microsoftgraph/msgraph-typescript-typings) with this library. We love your feedback!  You can file an issue in this repository or write on our [UserVoice page](https://officespdev.uservoice.com/). \n\n**Looking for IntelliSense on models (Users, Groups, etc.)? Check out the [Microsoft Graph Types](https://github.com/microsoftgraph/msgraph-typescript-typings) repository!**\n\n[![TypeScript demo](https://raw.githubusercontent.com/microsoftgraph/msgraph-sdk-javascript/master/types-demo.PNG)](https://github.com/microsoftgraph/msgraph-typescript-typings)\n\n## Installation\n### Node\n1) Install [Node.js and npm](https://nodejs.org/).\n\n2) ```npm install @microsoft/microsoft-graph-client```\n\n3) Include the library in your JavaScript file with `const MicrosoftGraph = require(\"@microsoft/microsoft-graph-client\");`\n\n### Browser\n\nInclude [lib/graph-js-sdk-web.js](https://github.com/microsoftgraph/msgraph-sdk-javascript/raw/master/lib/graph-js-sdk-web.js) in your page.\n```html\n<script type=\"text/javascript\" src=\"graph-js-sdk-web.js\"></script>\n```\n\n## Usage\n### Initialize client with access token provider\nThis client library only handles authentication in the most basic way possible. The application is responsible for refreshing tokens and returning an immediately valid access token in the authentication provider.\n```javascript\n\nvar client = MicrosoftGraph.Client.init({\n    authProvider: (done) => {\n        done(null, \"PassInAccessTokenHere\"); //first parameter takes an error if you can't get an access token\n    }\n});\n\n```\n\n### Calling pattern\n\nAll calls to Microsoft Graph are chained together starting with `client.api(path)`.  Path supports the following formats:  \n\n* me\n* /me\n* https://graph.microsoft.com/v1.0/me\n* https://graph.microsoft.com/beta/me\n* me/events?$filter=startswith(subject, 'ship')\n\n```javascript\n// Example calling /me with no parameters\nclient\n    .api('/me')\n    .get((err, res) => {\n        console.log(res); // prints info about authenticated user\n    });\n```\n\nCalls should start with `.api()`, then chain query parameters and end with an action.\n```javascript\n// get the names of my top 5 contacts on the beta endpoint\nclient\n    .api('me/people')\n    .version(\"beta\") //optional, but recommeded to have before query params\n    .top(5)\n    .select(\"displayName\")\n    .get((err, res) => {\n        const topContacts = res.value.map((u) => {return u.displayName});    \n        console.log(\"Your top contacts are\", topContacts.join(\", \"));\n    });\n```\n\nThe actions(.get(), .put(), etc.) accept a callback or don't pass in a function to get back a Promise.\n```javascript\nclient\n    .api('/me')\n    .select(\"displayName\")\n    .get()\n    .then((res) => {\n        console.log(res);\n    }).catch((err) => {\n        console.log(err);\n    });\n```\n\n## Actions\n\n### .post() and .patch()\nThe first parameter of `.post()` and `.patch()` takes an object that will be sent as the content of the request.\n\n````javascript\n// construct the email object\nconst mail = {\n    subject: \"Microsoft Graph JavaScript Sample\",\n    toRecipients: [{\n        emailAddress: {\n            address: \"example@example.com\"\n        }\n    }],\n    body: {\n        content: \"<h1>MicrosoftGraph JavaScript Sample</h1>Check out https://github.com/microsoftgraph/msgraph-sdk-javascript\",\n        contentType: \"html\"\n    }\n}\n\nclient\n    .api('/users/me/sendMail')\n    .post({message: mail}, (err, res) => {\n        console.log(res)\n    })\n````\n\n### `.del()` and `.delete()`\n\n````javascript\n// delete a OneDrive item\nclient\n    .api(`/me/drive/items/${ONE_DRIVE_FILE_ID_TO_DELETE}`)\n    .delete((err, res) => {\n        if (err) {\n            console.log(err)\n            return;\n        }\n        console.log(res)\n    })\n\n````\n### `.put()` and `.putStream()`\n\nYou can upload files to the graph using `.put()`.  For example, this can be used to update a profile picture from an HTML input form.  See the [browser sample](samples/browser) for complete code.\n\n```javascript\nvar file = document.querySelector('input[type=file]').files[0];\n\nclient\n    .api('/me/photo/$value')\n    .put(file, (err, res) => {\n        if (err) {\n            console.log(err);\n            return;\n        }\n        console.log(\"We've updated your picture!\");\n    });\n```\n\n\nUse `.putStream()` to upload files to Microsoft Graph with Node.js streams.\n````javascript\n\n// Upload a file to OneDrive\nlet fs = require('fs'); // requires filesystem module\nlet stream = fs.createReadStream('./logo.png'); //path to local file\nclient\n    .api('/me/drive/root/children/logo.png/content') // path to the destination in OneDrive\n    .putStream(stream, (err) => {\n        console.log(err);\n    });\n````\n\n### `.getStream()`\nUse `.getStream()` to stream a download from Microsoft Graph.\n````javascript\nconst fs = require('fs'); // requires filesystem module\nclient\n    .api('/me/drive/root/children/Book.xlsx/content') // path of  source file in OneDrive\n    .getStream((err, downloadStream) => {\n        let writeStream = fs.createWriteStream('Book.xlsx'); // path to save file to\n        downloadStream.pipe(writeStream).on('error', console.log);\n    });\n````\n\n\n## Query Parameters\n### $select, $expand and $orderby\nThese methods can take a string property, an array of strings or you can pass in each value as a separate argument.\n````js\n.select(\"birthday\")\n.select(\"department\")\n// same as\n.select(\"birthday\", \"department\")\n// same as\n.select([\"birthday\", \"department\"])\n````\n```javascript\nclient\n    .api('/me/people')\n    .select([\"displayName\", \"department\", \"title\"])\n    .get((err, res) => {\n        console.log(res)\n    })\n```\n\n### $top and $skip\nThese parameters only take a number. Calling them multiple times is not supported.\n\n````js\n.top(5)\n.skip(10)\n````\n\n### $count\nSet .count() to true to also return the number of objects in the collection.\n\n````js\n.count(true)\n````\n\n### $filter\nPass a filter string to `.filter()` for filtering result collections.  Calling filter multiple times will override previous filter strings.\n````js\nclient\n    .api(\"/users\")\n    .filter(\"startswith(displayName, 'david')\")\n    .get((err, res) => {\n        console.log(res)\n    })\n````\n\n## Other API methods\n\n### .version()\nPassing in a version through `.version()` has the highest priority. It overrides the Microsoft Graph client default version from `.init()` and the global library default (currently v1.0).\n\n### .query()\nYou can pass in any URL query parameters as a dictionary or string.\n````javascript\n.query({\"$select\":\"displayName\"})\n// same as \n.query(\"$select=displayName\")\n// same as\n.select(\"displayName\")\n\n````\n\n### .header() and .headers()\nYou can pass in additional request headers, either individually or in a dictionary.\n````javascript\n.header(\"someHeaderName\", \"someHeaderValue\")\n// or\n.headers({\"someHeaderName\":\"someHeaderValue\"})\n\n````\n\n### .responseType()\nTo set a custom response type, use the `.responseType(string)` method.  To see an example, check the [browser sample](samples/browser/index.html) that downloads an image and displays it in an `<img>` element.\n\n## Running node samples\nYou can run and debug the node samples found under [./samples/node/node-sample.js](./samples/node/node-sample.js) by running the *Run node samples* configuration from the **Debug** (Ctrl + Shift + D) menu in Visual Studio Code. Alternately, you can run the node samples from the CLI by entering `node ./samples/node/node-sample.js` (assuming you are at the root of this repo). You'll need to rename the *secrets.example.json* file to *secrets.json* and add a valid access token to it. You can get an access token by doing the following:\n1. Go to [Graph Explorer](https://developer.microsoft.com/en-us/graph/graph-explorer).\n2. Login with the account you want to use to run the node samples.\n3. Open the F12 dev tools.\n4. Type `tokenPlease()` into the console to get an access token.\n5. Copy the access token and put it into the *secrets.json* file and save the file.\n\nWe suggest that you become acquainted with these samples as they show some of the main use scenarios for this client library.\n\n## Additional information\n### Options in `MicrosoftGraph.Client.init()`\n\nThe following are optional parameters to pass to MicrosoftGraph.Client.init(), except for the authProvider:\n* defaultVersion - When .version() isn't called, this version is used. (defaults to v1.0)\n* debugLogging - Set to true to see the URL of the request printed.\n* authProvider - See the [usage](#usage) section for info.\n* baseUrl - If you need to call a different URL instead of graph.microsoft.io, specify it as a string here.\n\n### Full service response\nThe full response containing the headers, status code, and body can be obtained by passing a third parameter to the callback.\n````javascript\nclient\n    .api('/me')\n    .select(\"displayName\")\n    .get((err, res, rawResponse) => {\n        console.log(rawResponse.statusCode);\n        console.log(rawResponse.header);\n    });\n````\n\n### Native date objects can be passed in as parameters\n```javascript\nvar date = new Date();\ndate.setDate(date.getDate()-365); // ~ 1 year ago\n\nclient\n    .api('/me')\n    .body({\"birthday\": date})\n    .update((err, res) => {\n        console.log(\"Updated my birthday\")\n    })\n```\n\n## Development\nThese steps are not required to use this library.\n\n```npm install``` installs development dependencies (TypeScript, Mocha, etc.).\n> **Note:** If you want to run ```tsc``` from the command line, install TypeScript globally with ```npm install -g typescript``` or reference `./node_modules/.bin/tsc`\n\n```npm run build``` generates lib/ files for node and browser versions.\n\n```npm pack``` bundles the npm module.\n\n```npm test``` runs tests of the core library (URL parsing, mock responses, etc). You can also set breakpoints and run this from within Visual Studio Code by selecting the *Run core test* configuration from the Debug view.\n\n```npm run test:types``` to run tests against the Graph API for users, groups, Excel, OneNote, etc.\n\nTo build only browser version:\n```\nnode node-browserify.js > lib/graph-js-sdk-web.js\n```\n\n## Questions and comments\n\nWe'd love to get your feedback about the Microsoft Graph JavaScript client library. You can send your questions and suggestions to us in the [Issues](https://github.com/microsoftgraph/msgraph-sdk-javascript/issues) section of this repository.\n\n\n## Contributing\nPlease see the [contributing guidelines](CONTRIBUTING.md).\n## Changelog\n\n#### 1.0.0\n* Added tests for new Graph functionality - Delta query, Extensibility, OneNote, and more.\n\n#### 0.4.0\n* Add support for ES5. Make sure to use `graph-js-sdk-web.js` for web apps\n* Removed iterator helper method.\n\n#### 0.3.1\n* Support for Node.js versions 4 and 5\n\n#### 0.3.0\n* Migrated away from typings in client library core and TypeScript sample\n\n#### 0.2.2\n* Updated SuperAgent to version ``` 3.3.0 ```\n\n#### 0.2.0\n* **Breaking change for existing apps** - Initialize the client library with `MicrosoftGraph.Client.init({...})`. See the updated usage section below for code samples.\n* Added response handling tests to simulate Graph calls\n* Added type declarations file for core client library, which adds intellisense for chained methods.\n\n\n## Additional resources\n\n* [Microsoft Graph website](https://graph.microsoft.io)\n* [Microsoft Graph TypeScript types](https://github.com/microsoftgraph/msgraph-typescript-typings/)\n* [Angular.js sample using the JavaScript client library](https://github.com/microsoftgraph/angular-connect-sample)\n* [Node.js sample using the JavaScript client library](https://github.com/microsoftgraph/nodejs-connect-sample)\n* [Office Dev Center](http://dev.office.com/)\n\n## Copyright\nCopyright (c) Microsoft Corporation. All rights reserved.\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## Third Party Notices\nSee [Third Party Notices](https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/master/THIRD%20PARTY%20NOTICES) for information on the packages that are included in the [package.json](https://github.com/microsoftgraph/msgraph-sdk-javascript/blob/master/package.json)\n",
    "licenseText": "msgraph-sdk-javascript\n\nCopyright (c) Microsoft Corporation\nAll rights reserved. \nMIT License\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"\"Software\"\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\nhttps://github.com/visionmedia/superagent\nSuperagent\nversion 2.2\nlicense is MIT: https://github.com/visionmedia/superagent/blob/master/LICENSE\n",
    "license": "MIT*"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@microsoft/microsoft-graph-client/-/microsoft-graph-client-1.1.0.tgz#d6b91cc05de7920f01b51d3ce3d5faa8f7afd959",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@microsoft/microsoft-graph-client/-/microsoft-graph-client-1.1.0.tgz",
    "hash": "d6b91cc05de7920f01b51d3ce3d5faa8f7afd959",
    "integrity": "sha512-sDgchKZz1l3QJVNdkE1P1KpwTjupNt1mS9h1T0CiP+ayMN7IeFKfElB8IYtxFplNalZTmEq+iqoQFqUVpVMLfQ==",
    "registry": "npm",
    "packageName": "@microsoft/microsoft-graph-client",
    "cacheIntegrity": "sha512-sDgchKZz1l3QJVNdkE1P1KpwTjupNt1mS9h1T0CiP+ayMN7IeFKfElB8IYtxFplNalZTmEq+iqoQFqUVpVMLfQ== sha1-1rkcwF3nkg8BtR0849X6qPev2Vk="
  },
  "registry": "npm",
  "hash": "d6b91cc05de7920f01b51d3ce3d5faa8f7afd959"
}